<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// GUI Surface

_mapSurface = surface_create(512, 512);

// The size of the ENTIRE map in the world
_mapSize = 16 * 300 * 16 * 1 * 0.8;

_startX = - _mapSize / 2;
_startY = - _mapSize / 2;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw our minimap

display_set_gui_size(view_wport, view_hport);

draw_set_font(font_small);

// First, fill in our surface:

if (!surface_exists(_mapSurface)) {
    _mapSurface = surface_create(512, 512);
}

var surfWidth = surface_get_width(_mapSurface);
var surfHeight = surface_get_height(_mapSurface);

surface_set_target(_mapSurface);
draw_clear($111111);

// Now draw the planets!
var planets = get_planets();
for(var i = 0; i &lt; ds_list_size(planets); i++) {
    var planet = planets[| i];

    // Minimap Pixels of planet
    var planetX = surfWidth * (planet.x - _startX) / _mapSize;
    var planetY = surfHeight * (planet.y - _startY) / _mapSize;

    var planetScale = 1;//surfWidth * (2 * planet._radius / sprite_get_width(sprMinimapPlanet)) / _mapSize;

    draw_sprite_ext(sprMinimapPlanet, planet._planetStatus, planetX, planetY, planetScale, planetScale, 0, c_white, 1);
    // Draw the planet's name!
    draw_set_color(c_white);
    draw_set_valign(fa_center);
    draw_text(planetX + 8, planetY, planet._name);
    draw_set_valign(fa_top);
}

// Player
var px = surfWidth * (objShip.x - _startX) / _mapSize;
var py = surfHeight * (objShip.y - _startY) / _mapSize;
draw_sprite_ext(sprMinimapPlayer, 0, px, py, 1, 1, objShip.image_angle, c_white, 1);

// Hyperdrive?
if (objShip._hyperDriveCells &gt;= objShip._hyperDriveCellsMax) {
    var dist = surfWidth * objShip._hyperDriveLeapDistance / _mapSize;
    var angle = objShip.image_angle;
    var warpX = px + lengthdir_x(dist, angle);
    var warpY = py + lengthdir_y(dist, angle);

    draw_set_color(c_white);
    draw_line(px, py, warpX, warpY);
    draw_sprite(sprMinimapWarpDestination, 0, warpX, warpY);
    draw_set_halign(fa_middle);
    draw_text(warpX, warpY - 16, "Press Space to warp here!");
    draw_set_halign(fa_left);
}

// Goo drawing

var gx = surfWidth *  (objGooSystem._gooOriginX - _startX) / _mapSize;
var gy = surfHeight * (objGooSystem._gooOriginY - _startY) / _mapSize;
var gr = surfWidth * objGooSystem._gooRadius / _mapSize;
draw_sprite(sprMinimapGooOrigin, 0, gx, gy);
draw_set_color(c_red);
draw_text(gx + 6, gy, "Ground Zero");

draw_ellipse(gx - gr, gy - gr, gx + gr, gy + gr, true);

surface_reset_target();

var mapX = 64 + 16,
    mapY = 64 - 16;

// Now draw the actual surface with the window!
draw_surface(_mapSurface, mapX, mapY);
draw_set_color(c_white);

draw_set_font(font_bigish);
draw_set_halign(fa_middle);
draw_text(mapX + surfWidth/2, mapY + 8, "SYSTEM MAP");
draw_set_halign(fa_left);

draw_rectangle(mapX, mapY, mapX + surfWidth, mapY + surfHeight, true);
//draw_sprite_ext(sprMinimapWindow, 0, view_wport - 128 - 8, view_hport - 128 - 8, 2, 2, 0, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

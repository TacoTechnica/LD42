<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBossBody</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Visual

_eyeRadius = 16;
image_speed = 0;

_deathEmitter = part_emitter_create(Gamestate._mainPartSystem);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Attacks

_playerSpotted = false;

enum BOSS_ATTACK {
    WAIT,
    CIRCLE_LAUNCH,
    LASER,
    ASTEROIDS,
    CHUCKEM
}

_attackTimes[BOSS_ATTACK.WAIT] = 60;
_attackTimes[BOSS_ATTACK.CIRCLE_LAUNCH] = 60 * 5;
_attackTimes[BOSS_ATTACK.LASER] = 60 * 2;
_attackTimes[BOSS_ATTACK.ASTEROIDS] = 60 * 2;
_attackTimes[BOSS_ATTACK.CHUCKEM] = 60 * 2;

_attack = BOSS_ATTACK.WAIT;
_attackProgress = 0;


// Special variables
_laserAngle = 0;

_playerSpotted = false;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Dumb compatibility
_velX = 0;
_velY = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Health
_healthMax = 400 * 1.5;
_health = _healthMax;

_dead = false;
_deadTimer = 60 * 2;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>1</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>1</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Game done!

Gamestate._gameDone = true;

show_debug_message("Game Done!");

instance_deactivate_all(false);

audio_stop_all();
audio_play_sound(musicBattyMcFaddin,100,false);
room_goto(roomThankyou);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Finally die

visible = false;
alarm[3] = 60 * 3;

show_debug_message("Boss Dead!");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// FINISH ATTACK or Next attack
if (_playerSpotted) {
    if (_attack == BOSS_ATTACK.LASER) {
        laserSpeed = 250;
        var laser = instance_create(x, y, objBossLaser);
        laser._velX = lengthdir_x(laserSpeed, _laserAngle);
        laser._velY = lengthdir_y(laserSpeed, _laserAngle);
        laser.image_angle = _laserAngle;
        
        audio_play_sound(soundLaser,1, false);
    }
    
    if (_attack == BOSS_ATTACK.WAIT) {
        _attack = 1 + floor(random(4)); // Assuming wait is 0...
    } else {
        _attack = BOSS_ATTACK.WAIT;
    }
}
_attackProgress = 0;

alarm[1] = _attackTimes[_attack];
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Switch to a random sprite

image_index = random(image_number);

var num = random(100);
if num &lt; 25 {
    image_angle = 0;
} else if num &lt; 50 {
    image_angle = 90;
} else if num &lt; 75 {
    image_angle = 180;
} else {
    image_angle = 270;
}

alarm[0] = 1 + random(100);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Death
if (!_dead &amp;&amp; _health &lt;= 0 &amp;&amp; alarm[2] == -1) {
    _dead = true;
    alarm[2] = _deadTimer;
}

if (_dead) {
    objShip._invulnurable = true;

    if (alarm[3] == -1 &amp;&amp; !Gamestate._gameDone) {
        part_emitter_region(Gamestate._mainPartSystem, _deathEmitter, x - 64, x + 64, y - 64, y + 64, ps_shape_diamond, ps_distr_invgaussian);
        part_emitter_burst(Gamestate._mainPartSystem, _deathEmitter, Gamestate._bossDeathPartType, 5);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Special camera scale!

var regularScale = 1.5;

var distSqr = sqr(x - objShip.x) + sqr(y - objShip.y);
if (distSqr &lt; 1000*1000) {

    var scale = regularScale + 1 * (1000*1000 - distSqr) / (1000*1000);
    scale = clamp(scale, 1, 2.5);
    camera_set_scale(scale);
} else {
    camera_set_scale(regularScale);
}

_playerSpotted = distSqr &lt; 800*800;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle attacks

if (_dead || !_playerSpotted) {
    _attack = BOSS_ATTACK.WAIT;
}

var progress = _attackProgress / _attackTimes[_attack];

switch (_attack) {
    case BOSS_ATTACK.WAIT:
        // Do nothing
        break;
    case BOSS_ATTACK.CIRCLE_LAUNCH:
        var angle = 3 * 360 * progress;
        if (_attackProgress % 2 == 0) {
            enemy_fire_bullet(id, angle, false);
            enemy_fire_bullet(id, angle + 180, false);
        }
        break;
    case BOSS_ATTACK.LASER:
        if _attackProgress % 3 == 0 {
            var s = audio_play_sound(soundBeeper, 2, false);
            audio_sound_gain(s, 0.2, 0);
        }
        if (progress &lt; 0.98) {
            _laserAngle = point_direction(x, y, objShip.x, objShip.y);
        }
        break;
    case BOSS_ATTACK.ASTEROIDS:
        // SEE objAsteroidThrower Step 1
        break;
    case BOSS_ATTACK.CHUCKEM:
        if _attackProgress % 40 == 0 {
            var count = 30;
            for(var i = 0; i &lt; count; i++) {
                var angle = 360 * i / count;
                var moveSpeed = random(2) + 4;

                var asteroid = instance_create(x, y, objAsteroid);
                if instance_exists(asteroid) {
                    asteroid._velX = lengthdir_x(moveSpeed, angle);
                    asteroid._velY = lengthdir_y(moveSpeed, angle);
                    asteroid._velRotation = 0.4 * (random(moveSpeed * 2) - moveSpeed);
                }
            }
        }
        break;
}

_attackProgress++;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collide with player

if place_meeting(x, y, objShip) {
    var angle = point_direction(x, y, objShip.x, objShip.y);
    objShip._velX = lengthdir_x(10, angle);
    objShip._velY = lengthdir_y(10, angle);

    ship_hit();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw health

if (_playerSpotted) {
    draw_set_color(c_white);
    draw_set_alpha(1);
    var startY = 16;
    var w = 600;
    var h = 10;
    draw_healthbar(view_wport/2 - w/2, startY,view_wport/2 + w/2,startY + h, 100 * (_health / _healthMax), c_gray,c_red, c_red, 0, true, true);
    draw_set_halign(fa_center);
    draw_text(view_wport / 2, startY + 24, "Mor");
    draw_set_halign(fa_left);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw this mess

draw_self();

draw_sprite_ext(sprBossEye, 0, x, y, 2, 2, 0, c_white, 1);
var angle = point_direction(x, y, objShip.x, objShip.y);

if (!_dead) {
    draw_sprite_ext(sprBossEye, 1, 
            x + lengthdir_x(_eyeRadius, angle), 
            y + lengthdir_y(_eyeRadius, angle),
            2, 2, 0, c_white, 1);
} else {
    draw_sprite(sprBossEye, 1, x + random(5) - 2.5, y + random(5) - 2.5);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw special attack stuff

if (_attack == BOSS_ATTACK.LASER) {
    var progress = _attackProgress / _attackTimes[_attack];

    if (progress &lt; 0.9) {
        draw_set_color(c_red);
        draw_set_alpha(random(0.4) + 0.1);
    } else {
        draw_set_color(c_lime);
        draw_set_alpha(0.5);
    }
    draw_line_width(x, y, x + lengthdir_x(1000, _laserAngle), y + lengthdir_y(1000, _laserAngle), 12);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

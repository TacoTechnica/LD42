<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprShip</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Inputs

_input_thrust = 0;
_input_rotation = 0;
_input_strafe = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Physics

_velX = 0;
_velY = 0;
_velRotation = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Magic physics

_maxVel = 5;
_angularDampener = 0.9;

_sideFriction = 0.05;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Ship control constants

_thrustForce = 0.4;
_rcsForce = 0.3;
_turnTorque = 4;

_sideBoostForce = 14;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Ship control util
_sideBoostCounter = 0;
_sideBoostCounterTime = 0 * 60;
_side_boost = 0; // Are we side boosting? What direction?

// Weapon firing delay
_weaponFireCounter = 0;
_weaponFireCounterTime = 2;

// Double tap to boost (double tap timer)
_strafeDoubleTapCounter = 0;
_strafeDoubleTapCounterTime = 25;
_strafeDoubleTapDirection = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Health and overheating
_health = 5;

_dead = false;

_hitTimer = 0;
_hitTimerTime = 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Inputs

if (!_dead) {

    _input_thrust = keyboard_check(vk_up);
    _input_rotation = keyboard_check(vk_left) - keyboard_check(vk_right);
    _input_strafe = keyboard_check(ord("D")) - keyboard_check(ord("A"));
    
    // Side boosting
    _side_boost = 0;
    if (_input_strafe != 0 &amp;&amp; (keyboard_check_pressed(ord("D")) || keyboard_check_pressed(ord("A")))) {
        // Check for second tap. Same direction, within a period of time
        if (_input_strafe == _strafeDoubleTapDirection &amp;&amp; _strafeDoubleTapCounter &lt;= _strafeDoubleTapCounterTime) {
            // If it's within the timing, strafe away!
            if (_sideBoostCounter &gt;= _sideBoostCounterTime) {
                _side_boost = _input_strafe;
                _sideBoostCounter = 0;
                _strafeDoubleTapCounter = 0;
                _strafeDoubleTapDirection = 0;
    
                sprite_index = sprShipFlip;
                image_speed = 0.2;
                if (_input_strafe == 1) {
                    image_speed *= -1;
                    image_index = image_number - 1;
                }
            }        
        } else {
            // Check for first press
            _strafeDoubleTapCounter = 0;
            _strafeDoubleTapDirection = _input_strafe;
        }
    
    }
    
    // Thrust
    _velX += _input_thrust * lengthdir_x(_thrustForce, image_angle);
    _velY += _input_thrust * lengthdir_y(_thrustForce, image_angle);
    
    // Rotate
    _velRotation = _input_rotation * _turnTorque;

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move by physics

x += _velX;
y += _velY;

image_angle += _velRotation;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move by magic physics

// Cap at max speed
var vel = sqrt( sqr(_velX) + sqr(_velY));
if (vel &gt;= _maxVel) {
    _velX *= (_maxVel / vel);
    _velY *= (_maxVel / vel);
}

// Slow down our side speed AND our backwards speed
var velAngle = point_direction(0,0, _velX, _velY); // The angle we're traveling at
var sideAngle = 90 - (image_angle - velAngle);
var sideVel  = lengthdir_x(vel, sideAngle);
var sideFricForce = sign(sideVel) * min( abs(sideVel), _sideFriction); // What force will we apply to the side?
// Strafe!
sideFricForce += -1 * _input_strafe * _rcsForce + -1 * _side_boost * _sideBoostForce;
var sideFricAngle = image_angle - 90;
_velX -= lengthdir_x(sideFricForce, sideFricAngle);
_velY -= lengthdir_y(sideFricForce, sideFricAngle);

// Slow down moving backwards
var frontVel = -1 * lengthdir_y(vel, sideAngle);
if (frontVel &lt; 0) {
    var backFricForce = min( abs(frontVel), _sideFriction);
    var backFricAngle = image_angle;
    _velX += lengthdir_x(backFricForce, backFricAngle);
    _velY += lengthdir_y(backFricForce, backFricAngle);
}

// Damp our rotations
_velRotation *= _angularDampener
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Weaponry

if (!_dead) {

    if keyboard_check(ord("W")) {
        if (_weaponFireCounter &gt; _weaponFireCounterTime) {
            ship_fire_bullet(id, image_angle);
            camera_apply_shake(3);
            _weaponFireCounter = 0;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Camera
if (!_dead)
    camera_follow_ship(id);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Ship control util
_sideBoostCounter++;
_weaponFireCounter++;
_strafeDoubleTapCounter++;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Health and death

_hitTimer++;

if (_health &lt;= 0) {
    _dead = true;
}

if (visible &amp;&amp; _dead) {

    var deathanim = instance_create(x, y, objShipDead);

    deathanim._velX = _velX;
    deathanim._velY = _velY;
    deathanim._camAngle = view_angle;
    visible = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// If we're flipping, stop flipping
if sprite_index == sprShipFlip {
    sprite_index = sprShip;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Health bar

draw_sprite_ext(sprUIHealthBar, 5 - _health, 32*2, view_hport - 64*2,2,2,0,c_white,1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw ship with hit if necessary

// Scales the non-red components down by this
var scaleBack = 255 * min(1, _hitTimer / _hitTimerTime);

draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, make_colour_rgb(255, scaleBack, scaleBack), 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

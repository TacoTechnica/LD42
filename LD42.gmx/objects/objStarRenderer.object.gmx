<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Procedural variables
_chunkWidth = 640;
_chunkHeight = 480;
// NOTE: This should be AT LEAST the size of our view.
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw stars

var quadrantX = floor(view_xview / _chunkWidth);
var quadrantY = floor(view_yview / _chunkHeight);

// Parallax depth (0 is regular)
var p = 0.5;

// Draw them less when we're by the surface
draw_set_alpha( 1 - get_target_planet_atmosphere_density(view_xview + view_wview/2, view_yview + view_hview/2));

var gd = distance_to_goo_origin(view_xview + view_wview / 2, view_yview + view_hview/2);

if (gd &lt; 6000) {
    draw_set_alpha(draw_get_alpha() * gd / 6000);
}

star_renderer_render_chunk(quadrantX,   quadrantY,   _chunkWidth, _chunkHeight, p);
star_renderer_render_chunk(quadrantX+1, quadrantY,   _chunkWidth, _chunkHeight, p);
star_renderer_render_chunk(quadrantX,   quadrantY+1, _chunkWidth, _chunkHeight, p);
star_renderer_render_chunk(quadrantX+1, quadrantY+1, _chunkWidth, _chunkHeight, p);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
